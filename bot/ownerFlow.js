const Owner = require('../models/owner.model');
const ManagedChannel = require('../models/managedChannel.model');
const Withdrawal = require('../models/withdrawal.model');
const Transaction = require('../models/transaction.model');
const { nanoid } = require('nanoid');

const userStates = {};

// --- MULTI-LANGUAGE HELP TEXTS (WITH FULL DETAILS) ---
const LANGUAGES = {
    en: {
        HELP_TEXTS: {
            main: "Welcome to the Help Center! I am here to guide you. Please choose a topic below to learn more.",
            gettingStarted: `*ЁЯЪА Getting Started: How to Add Your Channel*

This is a simple 3-step process to connect your channel to our platform and start earning.

1я╕ПтГг  **Start the Process**
   - Use the \`/addchannel\` command or go to the main menu (\`/start\`) and click "тЮХ Add a New Channel".

2я╕ПтГг  **Give Admin Permissions**
   - The bot will ask you to make it an **Admin** in your premium channel.
   - Go to your channel's settings -> Administrators -> Add Admin, and add the bot. Please give it permission to "Invite Users via Link".

3я╕ПтГг  **Forward a Message**
   - Once the bot is an admin, **forward any message** from that channel to the bot. This is how the bot confirms it has access.

4я╕ПтГг  **Set Your Prices**
   - Finally, the bot will ask you to set your subscription prices. You need to send them in a specific format, with each plan on a new line.
   - *Example:*
     \`30 days 100 rs\`
     \`90 days 250 rs\`
     \`365 days 800 rs\`

тЬЕ That's it! The bot will confirm and give you a unique link (e.g., \`t.me/YourBotName?start=AbCd123\`). Share this link with your users!`,
            
            dashboard: `*ЁЯУК Understanding Your Financial Dashboard*

Your dashboard (\`/dashboard\`) is your complete financial overview. Here's what each term means:

ЁЯУИ *Total Revenue:*
   - This is the total gross amount of money generated from all sales on your channels, *before* any deductions.

тЮЦ *Service Charge (${process.env.PLATFORM_COMMISSION_PERCENT}%):*
   - This is our platform fee for providing the bot, payment system, security, and support. It is automatically calculated based on your Total Revenue.

ЁЯТ░ *Gross Earnings:*
   - This is your total earning *after* the service charge is deducted from the Total Revenue.
   - The calculation is: \`(Total Revenue - Service Charge)\`.

ЁЯТ╕ *Total Paid Out:*
   - This is the total amount of money you have successfully withdrawn to your bank account so far.

тЬЕ **Net Balance (Withdrawable):**
   - This is the most important number. This is the actual money currently in your wallet that is ready to be withdrawn.
   - The calculation is: \`(Gross Earnings - Total Paid Out)\`.`,
            
            managingChannels: `*ЁЯУ║ Managing Your Channels*

You have full control over your connected channels.

- Use the \`/mychannels\` command to see a list of all channels you've connected.
- For each channel, you'll see a "тЪЩя╕П Manage" button. Clicking it gives you these powerful options:

тЬПя╕П *Edit Plans:*
   - Allows you to change the price or duration of your subscription plans at any time.

ЁЯФЧ *Get Link:*
   - If you ever lose the special subscriber link for a channel, use this button to get it again.

ЁЯЧСя╕П *Remove Channel:*
   - This will permanently delete the channel from our platform.
   - **Important:** New subscriptions will stop immediately. However, your existing subscribers will remain in the channel until their plan expires. This action cannot be undone.`,
            
            withdrawals: `*ЁЯТ╕ The Withdrawal Process*

You can request a withdrawal of your earnings anytime your "Net Balance" is above the minimum limit (тВ╣${process.env.MINIMUM_WITHDRAWAL_AMOUNT}).

1я╕ПтГг  **Start the Request**
   - Use the \`/withdraw\` command or go to your dashboard and click "ЁЯТ╕ Request Withdrawal".

2я╕ПтГг  **Provide UPI ID**
   - The bot will ask for the UPI ID where you want to receive the money (e.g., \`yourname@oksbi\`). Please enter it carefully.

3я╕ПтГг  **Final Confirmation**
   - The bot will show you the exact amount to be withdrawn and your UPI ID, and ask for a final confirmation.

4я╕ПтГг  **Processing**
   - Once you confirm, your request is sent to the admin. The amount is immediately deducted from your wallet and marked as "pending".
   - The admin will manually process the payment to your UPI ID and approve the request in the system. This usually takes up to 24 hours.

You can check the status of all your past and pending requests in your dashboard under "ЁЯТ╕ Withdrawal History".`
        }
    },
    hi: {
        HELP_TEXTS: {
            main: "рд╕рд╣рд╛рдпрддрд╛ рдХреЗрдВрджреНрд░ рдореЗрдВ рдЖрдкрдХрд╛ рд╕реНрд╡рд╛рдЧрдд рд╣реИ! рдореИрдВ рдЖрдкрдХреА рдорджрдж рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣рд╛рдБ рд╣реВрдБред рдХреГрдкрдпрд╛ рдиреАрдЪреЗ рдПрдХ рд╡рд┐рд╖рдп рдЪреБрдиреЗрдВред",
            gettingStarted: `*ЁЯЪА рд╢реБрд░реБрдЖрдд рдХрд░реЗрдВ: рдЕрдкрдирд╛ рдЪреИрдирд▓ рдХреИрд╕реЗ рдЬреЛрдбрд╝реЗрдВ*\n\nрдЕрдкрдиреЗ рдЪреИрдирд▓ рдХреЛ рд╣рдорд╛рд░реЗ рдкреНрд▓реЗрдЯрдлреЙрд░реНрдо рд╕реЗ рдЬреЛрдбрд╝рдиреЗ рдФрд░ рдХрдорд╛рдИ рд╢реБрд░реВ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдпрд╣ рдПрдХ рд╕рд░рд▓ 3-рдЪрд░рдгреАрдп рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╣реИред

1я╕ПтГг  **рдкреНрд░рдХреНрд░рд┐рдпрд╛ рд╢реБрд░реВ рдХрд░реЗрдВ**
   - \`/addchannel\` рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдпрд╛ рдореБрдЦреНрдп рдореЗрдиреВ (\`/start\`) рдкрд░ рдЬрд╛рдПрдВ рдФрд░ "тЮХ рдирдпрд╛ рдЪреИрдирд▓ рдЬреЛрдбрд╝реЗрдВ" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред

2я╕ПтГг  **рдПрдбрдорд┐рди рдЕрдиреБрдорддрд┐рдпрд╛рдВ рджреЗрдВ**
   - рдмреЙрдЯ рдЖрдкрд╕реЗ рдЗрд╕реЗ рдЕрдкрдиреЗ рдкреНрд░реАрдорд┐рдпрдо рдЪреИрдирд▓ рдореЗрдВ **рдПрдбрдорд┐рди** рдмрдирд╛рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣реЗрдЧрд╛ред
   - рдЕрдкрдиреЗ рдЪреИрдирд▓ рдХреА рд╕реЗрдЯрд┐рдВрдЧреНрд╕ -> рдПрдбрдорд┐рдирд┐рд╕реНрдЯреНрд░реЗрдЯрд░ -> рдПрдбрдорд┐рди рдЬреЛрдбрд╝реЗрдВ рдкрд░ рдЬрд╛рдПрдВ, рдФрд░ рдмреЙрдЯ рдХреЛ рдЬреЛрдбрд╝реЗрдВред рдХреГрдкрдпрд╛ рдЗрд╕реЗ "рд▓рд┐рдВрдХ рдХреЗ рдорд╛рдзреНрдпрдо рд╕реЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЛ рдЖрдордВрддреНрд░рд┐рдд рдХрд░реЗрдВ" рдХреА рдЕрдиреБрдорддрд┐ рджреЗрдВред

3я╕ПтГг  **рдПрдХ рд╕рдВрджреЗрд╢ рдлреЙрд░рд╡рд░реНрдб рдХрд░реЗрдВ**
   - рдПрдХ рдмрд╛рд░ рдЬрдм рдмреЙрдЯ рдПрдбрдорд┐рди рдмрди рдЬрд╛рдП, рддреЛ рдЙрд╕ рдЪреИрдирд▓ рд╕реЗ **рдХреЛрдИ рднреА рд╕рдВрджреЗрд╢** рдмреЙрдЯ рдХреЛ рдлреЙрд░рд╡рд░реНрдб рдХрд░реЗрдВред рдЗрд╕реА рддрд░рд╣ рдмреЙрдЯ рдкреБрд╖реНрдЯрд┐ рдХрд░рддрд╛ рд╣реИ рдХрд┐ рдЙрд╕рдХреЗ рдкрд╛рд╕ рдПрдХреНрд╕реЗрд╕ рд╣реИред

4я╕ПтГг  **рдЕрдкрдиреА рдХреАрдорддреЗрдВ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░реЗрдВ**
   - рдЕрдВрдд рдореЗрдВ, рдмреЙрдЯ рдЖрдкрд╕реЗ рдЕрдкрдиреА рд╕рджрд╕реНрдпрддрд╛ рдХреА рдХреАрдорддреЗрдВ рдирд┐рд░реНрдзрд╛рд░рд┐рдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдХрд╣реЗрдЧрд╛ред рдЖрдкрдХреЛ рдЙрдиреНрд╣реЗрдВ рдПрдХ рд╡рд┐рд╢рд┐рд╖реНрдЯ рдкреНрд░рд╛рд░реВрдк рдореЗрдВ рднреЗрдЬрдирд╛ рд╣реЛрдЧрд╛, рдкреНрд░рддреНрдпреЗрдХ рдпреЛрдЬрдирд╛ рдПрдХ рдирдИ рд▓рд╛рдЗрди рдкрд░ред
   - *рдЙрджрд╛рд╣рд░рдг:*
     \`30 рджрд┐рди 100 рд░реБрдкрдпреЗ\`
     \`90 рджрд┐рди 250 рд░реБрдкрдпреЗ\`
     \`365 рджрд┐рди 800 рд░реБрдкрдпреЗ\`

тЬЕ рдмрд╕! рдмреЙрдЯ рдкреБрд╖реНрдЯрд┐ рдХрд░реЗрдЧрд╛ рдФрд░ рдЖрдкрдХреЛ рдЕрдкрдиреЗ рдЙрдкрдпреЛрдЧрдХрд░реНрддрд╛рдУрдВ рдХреЗ рд╕рд╛рде рд╕рд╛рдЭрд╛ рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдПрдХ рдпреВрдирд┐рдХ рд▓рд┐рдВрдХ (рдЬреИрд╕реЗ, \`t.me/YourBotName?start=AbCd123\`) рджреЗрдЧрд╛ред`,
            
            dashboard: `*ЁЯУК рдЕрдкрдиреЗ рд╡рд┐рддреНрддреАрдп рдбреИрд╢рдмреЛрд░реНрдб рдХреЛ рд╕рдордЭреЗрдВ*\n\nрдЖрдкрдХрд╛ рдбреИрд╢рдмреЛрд░реНрдб (\`/dashboard\`) рдЖрдкрдХрд╛ рд╕рдВрдкреВрд░реНрдг рд╡рд┐рддреНрддреАрдп рдЕрд╡рд▓реЛрдХрди рд╣реИред рдпрд╣рд╛рдБ рдкреНрд░рддреНрдпреЗрдХ рд╢рдмреНрдж рдХрд╛ рдЕрд░реНрде рд╣реИ:

ЁЯУИ *рдХреБрд▓ рд░рд╛рдЬрд╕реНрд╡:*
   - рдпрд╣ рдЖрдкрдХреЗ рдЪреИрдирд▓реЛрдВ рдкрд░ рд╕рднреА рдмрд┐рдХреНрд░реА рд╕реЗ рдЙрддреНрдкрдиреНрди рдХреБрд▓ рд╕рдХрд▓ рд░рд╛рд╢рд┐ рд╣реИ, рдХрд┐рд╕реА рднреА рдХрдЯреМрддреА рд╕реЗ *рдкрд╣рд▓реЗ*ред

тЮЦ *рд╕реЗрд╡рд╛ рд╢реБрд▓реНрдХ (${process.env.PLATFORM_COMMISSION_PERCENT}%):*
   - рдпрд╣ рдмреЙрдЯ, рднреБрдЧрддрд╛рди рдкреНрд░рдгрд╛рд▓реА, рд╕реБрд░рдХреНрд╖рд╛ рдФрд░ рд╕рд╣рд╛рдпрддрд╛ рдкреНрд░рджрд╛рди рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рд╣рдорд╛рд░рд╛ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рд╢реБрд▓реНрдХ рд╣реИред рдЗрд╕рдХреА рдЧрдгрдирд╛ рд╕реНрд╡рдЪрд╛рд▓рд┐рдд рд░реВрдк рд╕реЗ рдЖрдкрдХреЗ рдХреБрд▓ рд░рд╛рдЬрд╕реНрд╡ рдХреЗ рдЖрдзрд╛рд░ рдкрд░ рдХреА рдЬрд╛рддреА рд╣реИред

ЁЯТ░ *рд╕рдХрд▓ рдХрдорд╛рдИ:*
   - рдпрд╣ рдХреБрд▓ рд░рд╛рдЬрд╕реНрд╡ рд╕реЗ рд╕реЗрд╡рд╛ рд╢реБрд▓реНрдХ рдШрдЯрд╛рдП рдЬрд╛рдиреЗ рдХреЗ *рдмрд╛рдж* рдЖрдкрдХреА рдХреБрд▓ рдХрдорд╛рдИ рд╣реИред
   - рдЧрдгрдирд╛ рд╣реИ: \`(рдХреБрд▓ рд░рд╛рдЬрд╕реНрд╡ - рд╕реЗрд╡рд╛ рд╢реБрд▓реНрдХ)\`ред

ЁЯТ╕ *рдХреБрд▓ рднреБрдЧрддрд╛рди:*
   - рдпрд╣ рд╡рд╣ рдХреБрд▓ рд░рд╛рд╢рд┐ рд╣реИ рдЬрд┐рд╕реЗ рдЖрдкрдиреЗ рдЕрдм рддрдХ рд╕рдлрд▓рддрд╛рдкреВрд░реНрд╡рдХ рдЕрдкрдиреЗ рдмреИрдВрдХ рдЦрд╛рддреЗ рдореЗрдВ рдирд┐рдХрд╛рд▓рд╛ рд╣реИред

тЬЕ **рдиреЗрдЯ рдмреИрд▓реЗрдВрд╕ (рдирд┐рдХрд╛рд╕реА рдпреЛрдЧреНрдп):**
   - рдпрд╣ рд╕рдмрд╕реЗ рдорд╣рддреНрд╡рдкреВрд░реНрдг рд╕рдВрдЦреНрдпрд╛ рд╣реИред рдпрд╣ рд╡рд░реНрддрдорд╛рди рдореЗрдВ рдЖрдкрдХреЗ рд╡реЙрд▓реЗрдЯ рдореЗрдВ рд╡рд╛рд╕реНрддрд╡рд┐рдХ рдзрди рд╣реИ рдЬреЛ рдирд┐рдХрд╛рд▓рдиреЗ рдХреЗ рд▓рд┐рдП рддреИрдпрд╛рд░ рд╣реИред
   - рдЧрдгрдирд╛ рд╣реИ: \`(рд╕рдХрд▓ рдХрдорд╛рдИ - рдХреБрд▓ рднреБрдЧрддрд╛рди)\`ред`,
            
            managingChannels: `*ЁЯУ║ рдЕрдкрдиреЗ рдЪреИрдирд▓реЛрдВ рдХрд╛ рдкреНрд░рдмрдВрдзрди*

рдЖрдкрдХреЗ рдЬреБрдбрд╝реЗ рд╣реБрдП рдЪреИрдирд▓реЛрдВ рдкрд░ рдЖрдкрдХрд╛ рдкреВрд░рд╛ рдирд┐рдпрдВрддреНрд░рдг рд╣реИред

- рдЕрдкрдиреЗ рд╕рднреА рдЬреБрдбрд╝реЗ рд╣реБрдП рдЪреИрдирд▓реЛрдВ рдХреА рд╕реВрдЪреА рджреЗрдЦрдиреЗ рдХреЗ рд▓рд┐рдП \`/mychannels\` рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред
- рдкреНрд░рддреНрдпреЗрдХ рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП, рдЖрдкрдХреЛ рдПрдХ "тЪЩя╕П рдкреНрд░рдмрдВрдзрд┐рдд рдХрд░реЗрдВ" рдмрдЯрди рджрд┐рдЦрд╛рдИ рджреЗрдЧрд╛ред рдЗрд╕ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░рдиреЗ рд╕реЗ рдЖрдкрдХреЛ рдпреЗ рд╢рдХреНрддрд┐рд╢рд╛рд▓реА рд╡рд┐рдХрд▓реНрдк рдорд┐рд▓рддреЗ рд╣реИрдВ:

тЬПя╕П *рдкреНрд▓рд╛рди рд╕рдВрдкрд╛рджрд┐рдд рдХрд░реЗрдВ:*
   - рдЖрдкрдХреЛ рдХрд┐рд╕реА рднреА рд╕рдордп рдЕрдкрдиреА рд╕рджрд╕реНрдпрддрд╛ рдпреЛрдЬрдирд╛рдУрдВ рдХреА рдХреАрдордд рдпрд╛ рдЕрд╡рдзрд┐ рдмрджрд▓рдиреЗ рдХреА рдЕрдиреБрдорддрд┐ рджреЗрддрд╛ рд╣реИред

ЁЯФЧ *рд▓рд┐рдВрдХ рдкреНрд░рд╛рдкреНрдд рдХрд░реЗрдВ:*
   - рдпрджрд┐ рдЖрдк рдХрднреА рдХрд┐рд╕реА рдЪреИрдирд▓ рдХреЗ рд▓рд┐рдП рд╡рд┐рд╢реЗрд╖ рд╕рдмреНрд╕рдХреНрд░рд╛рдЗрдмрд░ рд▓рд┐рдВрдХ рдЦреЛ рджреЗрддреЗ рд╣реИрдВ, рддреЛ рдЗрд╕реЗ рдлрд┐рд░ рд╕реЗ рдкреНрд░рд╛рдкреНрдд рдХрд░рдиреЗ рдХреЗ рд▓рд┐рдП рдЗрд╕ рдмрдЯрди рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВред

ЁЯЧСя╕П *рдЪреИрдирд▓ рд╣рдЯрд╛рдПрдВ:*
   - рдпрд╣ рдЪреИрдирд▓ рдХреЛ рд╣рдорд╛рд░реЗ рдкреНрд▓реЗрдЯрдлрд╝реЙрд░реНрдо рд╕реЗ рд╕реНрдерд╛рдпреА рд░реВрдк рд╕реЗ рд╣рдЯрд╛ рджреЗрдЧрд╛ред
   - **рдорд╣рддреНрд╡рдкреВрд░реНрдг:** рдирдИ рд╕рджрд╕реНрдпрддрд╛рдПрдБ рддреБрд░рдВрдд рдмрдВрдж рд╣реЛ рдЬрд╛рдПрдВрдЧреАред рд╣рд╛рд▓рд╛рдБрдХрд┐, рдЖрдкрдХреЗ рдореМрдЬреВрджрд╛ рдЧреНрд░рд╛рд╣рдХ рдЕрдкрдиреА рдпреЛрдЬрдирд╛ рд╕рдорд╛рдкреНрдд рд╣реЛрдиреЗ рддрдХ рдЪреИрдирд▓ рдореЗрдВ рдмрдиреЗ рд░рд╣реЗрдВрдЧреЗред рдпрд╣ рдХреНрд░рд┐рдпрд╛ рдкреВрд░реНрд╡рд╡рдд рдирд╣реАрдВ рдХреА рдЬрд╛ рд╕рдХрддреА рд╣реИред`,
            
            withdrawals: `*ЁЯТ╕ рдирд┐рдХрд╛рд╕реА рдкреНрд░рдХреНрд░рд┐рдпрд╛*

рдЬрдм рднреА рдЖрдкрдХрд╛ "рдиреЗрдЯ рдмреИрд▓реЗрдВрд╕" рдиреНрдпреВрдирддрдо рд╕реАрдорд╛ (тВ╣${process.env.MINIMUM_WITHDRAWAL_AMOUNT}) рд╕реЗ рдКрдкрд░ рд╣реЛ, рдЖрдк рдЕрдкрдиреА рдХрдорд╛рдИ рдХреА рдирд┐рдХрд╛рд╕реА рдХрд╛ рдЕрдиреБрд░реЛрдз рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред

1я╕ПтГг  **рдЕрдиреБрд░реЛрдз рд╢реБрд░реВ рдХрд░реЗрдВ**
   - \`/withdraw\` рдХрдорд╛рдВрдб рдХрд╛ рдЙрдкрдпреЛрдЧ рдХрд░реЗрдВ рдпрд╛ рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдкрд░ рдЬрд╛рдПрдВ рдФрд░ "ЁЯТ╕ рдирд┐рдХрд╛рд╕реА рдХрд╛ рдЕрдиреБрд░реЛрдз рдХрд░реЗрдВ" рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВред

2я╕ПтГг  **UPI ID рдкреНрд░рджрд╛рди рдХрд░реЗрдВ**
   - рдмреЙрдЯ рдЙрд╕ UPI ID рдХреЗ рд▓рд┐рдП рдкреВрдЫреЗрдЧрд╛ рдЬрд╣рд╛рдВ рдЖрдк рдкреИрд╕рд╛ рдкреНрд░рд╛рдкреНрдд рдХрд░рдирд╛ рдЪрд╛рд╣рддреЗ рд╣реИрдВ (рдЬреИрд╕реЗ, \`yourname@oksbi\`)ред рдХреГрдкрдпрд╛ рдЗрд╕реЗ рдзреНрдпрд╛рди рд╕реЗ рджрд░реНрдЬ рдХрд░реЗрдВред

3я╕ПтГг  **рдЕрдВрддрд┐рдо рдкреБрд╖реНрдЯрд┐**
   - рдмреЙрдЯ рдЖрдкрдХреЛ рдирд┐рдХрд╛рд▓реА рдЬрд╛рдиреЗ рд╡рд╛рд▓реА рд╕рдЯреАрдХ рд░рд╛рд╢рд┐ рдФрд░ рдЖрдкрдХреА UPI ID рджрд┐рдЦрд╛рдПрдЧрд╛, рдФрд░ рдЕрдВрддрд┐рдо рдкреБрд╖реНрдЯрд┐ рдХреЗ рд▓рд┐рдП рдкреВрдЫреЗрдЧрд╛ред

4я╕ПтГг  **рдкреНрд░рд╕рдВрд╕реНрдХрд░рдг**
   - рдПрдХ рдмрд╛рд░ рдЬрдм рдЖрдк рдкреБрд╖реНрдЯрд┐ рдХрд░ рджреЗрддреЗ рд╣реИрдВ, рддреЛ рдЖрдкрдХрд╛ рдЕрдиреБрд░реЛрдз рдПрдбрдорд┐рди рдХреЛ рднреЗрдЬ рджрд┐рдпрд╛ рдЬрд╛рддрд╛ рд╣реИред рд░рд╛рд╢рд┐ рддреБрд░рдВрдд рдЖрдкрдХреЗ рд╡реЙрд▓реЗрдЯ рд╕реЗ рдХрд╛рдЯ рд▓реА рдЬрд╛рддреА рд╣реИ рдФрд░ "рд▓рдВрдмрд┐рдд" рдХреЗ рд░реВрдк рдореЗрдВ рдЪрд┐рд╣реНрдирд┐рдд рд╣реЛ рдЬрд╛рддреА рд╣реИред
   - рдПрдбрдорд┐рди рдореИрдиреНрдпреБрдЕрд▓ рд░реВрдк рд╕реЗ рдЖрдкрдХреА UPI ID рдкрд░ рднреБрдЧрддрд╛рди рдХреА рдкреНрд░рдХреНрд░рд┐рдпрд╛ рдХрд░реЗрдЧрд╛ рдФрд░ рд╕рд┐рд╕реНрдЯрдо рдореЗрдВ рдЕрдиреБрд░реЛрдз рдХреЛ рдордВрдЬреВрд░реА рджреЗрдЧрд╛ред рдЗрд╕рдореЗрдВ рдЖрдорддреМрд░ рдкрд░ 24 рдШрдВрдЯреЗ рддрдХ рд▓рдЧрддреЗ рд╣реИрдВред

рдЖрдк рдЕрдкрдиреЗ рдбреИрд╢рдмреЛрд░реНрдб рдореЗрдВ "ЁЯТ╕ рдирд┐рдХрд╛рд╕реА рдЗрддрд┐рд╣рд╛рд╕" рдХреЗ рддрд╣рдд рдЕрдкрдиреЗ рд╕рднреА рдкрд┐рдЫрд▓реЗ рдФрд░ рд▓рдВрдмрд┐рдд рдЕрдиреБрд░реЛрдзреЛрдВ рдХреА рд╕реНрдерд┐рддрд┐ рдХреА рдЬрд╛рдВрдЪ рдХрд░ рд╕рдХрддреЗ рд╣реИрдВред`
        }
    }
};

async function handleOwnerMessage(bot, msg, userStates) {
    const fromId = msg.from.id.toString();
    const text = msg.text || "";
    let owner = await Owner.findOne({ telegram_id: fromId });
    if (!owner) {
        owner = await Owner.create({ telegram_id: fromId, first_name: msg.from.first_name, username: msg.from.username });
    }
    if (owner.is_banned) {
        return bot.sendMessage(fromId, `тЭМ Your account is currently banned. Please contact support: @${process.env.SUPER_ADMIN_USERNAME}`);
    }
    const state = userStates[fromId];
    if (state && state.awaiting) {
        if (state.awaiting === 'upi_id') await handleUpiInput(bot, msg, owner, userStates);
        else if (state.awaiting === 'plans') await handlePlansInput(bot, msg, owner, userStates);
        else if (state.awaiting === 'channel_forward') await handleChannelForward(bot, msg, owner, userStates);
        else if (state.awaiting === 'edit_plans') await handlePlansInput(bot, msg, owner, userStates, true);
        return;
    }
    switch (text) {
        case '/start': await showMainMenu(bot, msg.chat.id, owner); break;
        case '/addchannel': await startAddChannelFlow(bot, msg.chat.id, fromId, userStates); break;
        case '/dashboard': await showDashboard(bot, msg.chat.id, owner); break;
        case '/withdraw': await startWithdrawalFlow(bot, msg.chat.id, owner, userStates); break;
        case '/mychannels': await listMyChannels(bot, msg.chat.id, owner); break;
        case '/help': await showHelpMenu(bot, msg.chat.id, owner); break;
        default: await showMainMenu(bot, msg.chat.id, owner, `I didn't understand. Here are the options:`);
    }
}

async function handleOwnerCallback(bot, cbq, userStates) {
    const fromId = cbq.from.id.toString();
    const chatId = cbq.message.chat.id;
    const messageId = cbq.message.message_id;
    const data = cbq.data;
    
    let owner = await Owner.findOne({ telegram_id: fromId });
    if (!owner) {
        owner = await Owner.create({ telegram_id: fromId, first_name: cbq.from.first_name, username: cbq.from.username });
    }

    await bot.answerCallbackQuery(cbq.id);

    const parts = data.split('_');
    const command = parts[1];
    const objectId = parts[2];

    switch (command) {
        case 'mainmenu': await showMainMenu(bot, chatId, owner, "Welcome Back!", messageId); break;
        case 'add': await startAddChannelFlow(bot, chatId, fromId, userStates); break;
        case 'dashboard': await showDashboard(bot, chatId, owner, messageId); break;
        case 'withdraw': await startWithdrawalFlow(bot, chatId, owner, userStates); break;
        case 'mychannels': await listMyChannels(bot, chatId, owner, messageId); break;
        case 'help': await showHelpMenu(bot, chatId, owner, messageId); break;
        case 'setlang': 
            owner.language = objectId;
            await owner.save();
            await showHelpMenu(bot, chatId, owner, messageId); 
            break;
        case 'helpsection': 
            const lang = owner.language || 'en';
            await bot.editMessageText(LANGUAGES[lang].HELP_TEXTS[objectId], { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: { inline_keyboard: [[{ text: "тмЕя╕П Back", callback_data: "owner_help" }]] } }); 
            break;
        case 'transactions': await showTransactionHistory(bot, chatId, owner, messageId); break;
        case 'withdrawalhistory': await showWithdrawalHistory(bot, chatId, owner, messageId); break;
        case 'channelstats': await showChannelStats(bot, chatId, owner, messageId); break;
        case 'managechannel': await showChannelManagementMenu(bot, chatId, objectId, messageId); break;
        case 'getlink': await sendChannelLink(bot, chatId, objectId); break;
        case 'editplans': userStates[fromId] = { awaiting: 'edit_plans', channel_db_id: objectId }; await bot.sendMessage(chatId, `Send the new plans in the format:\n\n\`30 days 100 rs\``, { parse_mode: 'Markdown' }); break;
        case 'removechannel': await confirmRemoveChannel(bot, chatId, objectId, messageId); break;
        case 'confirmremove': await removeChannel(bot, chatId, objectId, messageId); break;
        case 'withdrawconfirm': await handleWithdrawConfirm(bot, cbq, owner, userStates); break;
        case 'withdrawcancel': delete userStates[fromId]; await bot.editMessageText("Withdrawal request cancelled.", { chat_id: chatId, message_id: messageId }); break;
    }
}

async function showMainMenu(bot, chatId, owner, text = "Welcome, Channel Owner!", messageId = null) { const keyboard = { inline_keyboard: [ [{ text: "ЁЯУК My Dashboard", callback_data: "owner_dashboard" }, { text: "тЮХ Add a New Channel", callback_data: "owner_add" }], [{ text: "ЁЯУ║ My Channels", callback_data: "owner_mychannels" }, { text: "тЭУ Help & Support", callback_data: "owner_help" }] ]}; if (messageId) await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, reply_markup: keyboard }); else await bot.sendMessage(chatId, text, { reply_markup: keyboard }); }
async function showHelpMenu(bot, chatId, owner, messageId = null) { const lang = owner.language || 'en'; const otherLang = lang === 'en' ? 'hi' : 'en'; const langText = lang === 'en' ? 'ЁЯЗоЁЯЗ│ рд╣рд┐рдВрджреА рдореЗрдВ рд╕реНрд╡рд┐рдЪ рдХрд░реЗрдВ' : 'ЁЯЗмЁЯЗз Switch to English'; const help = LANGUAGES[lang].HELP_TEXTS; const keyboard = { inline_keyboard: [ [{ text: "ЁЯЪА Getting Started", callback_data: "owner_helpsection_gettingStarted" }], [{ text: "ЁЯУК Understanding Dashboard", callback_data: "owner_helpsection_dashboard" }], [{ text: "ЁЯУ║ Managing Channels", callback_data: "owner_helpsection_managingChannels" }], [{ text: "ЁЯТ╕ Withdrawal Process", callback_data: "owner_helpsection_withdrawals" }], [{ text: langText, callback_data: `owner_setlang_${otherLang}`}], [{ text: "тмЕя╕П Back to Main Menu", callback_data: "owner_mainmenu" }] ]}; if(messageId) await bot.editMessageText(help.main, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); else await bot.sendMessage(chatId, help.main, { parse_mode: 'Markdown', reply_markup: keyboard }); }
async function handleChannelForward(bot, msg, owner, userStates) { const fromId = owner.telegram_id; if (msg.forward_from_chat) { const channelId = msg.forward_from_chat.id.toString(); const channelName = msg.forward_from_chat.title; try { const botMember = await bot.getChatMember(channelId, (await bot.getMe()).id); if (botMember.status !== 'administrator') { await bot.sendMessage(fromId, `тЭМ Bot is not an admin in "${channelName}". Please make the bot an admin and try again.`); delete userStates[fromId]; return; } userStates[fromId] = { awaiting: 'plans', channel_id: channelId, channel_name: channelName }; await bot.sendMessage(fromId, `тЬЕ Great! Bot is an admin in "${channelName}".\n\nNow, send subscription plans in this format:\n\n\`30 days 100 rs\`\n\`90 days 250 rs\``, { parse_mode: 'Markdown' }); } catch (error) { await bot.sendMessage(fromId, `тЭМ An error occurred. Please make sure the bot is an admin in your channel and try again.`); delete userStates[fromId]; } } else { await bot.sendMessage(fromId, `That was not a forwarded message. Please forward a message from your channel.`); }};
async function handlePlansInput(bot, msg, owner, userStates, isEdit = false) { const fromId = owner.telegram_id; const state = userStates[fromId]; const lines = msg.text.split('\n'); const plans = []; let parseError = false; for (const line of lines) { const parts = line.match(/(\d+)\s+days?\s+(\d+)\s+rs?/i); if (parts) { plans.push({ days: parseInt(parts[1]), price: parseInt(parts[2]) }); } else if (line.trim() !== '') { parseError = true; break; } } if (parseError || plans.length === 0) { await bot.sendMessage(fromId, `тЭМ Invalid format. Please use the format like: \`30 days 100 rs\`. Try again.`); } else { if (isEdit) { await ManagedChannel.findByIdAndUpdate(state.channel_db_id, { plans: plans }); await bot.sendMessage(fromId, `тЬЕ Plans updated successfully!`); } else { const uniqueKey = nanoid(8); await ManagedChannel.create({ owner_id: owner._id, channel_id: state.channel_id, channel_name: state.channel_name, unique_start_key: uniqueKey, plans: plans }); const link = `https://t.me/${(await bot.getMe()).username}?start=${uniqueKey}`; await bot.sendMessage(fromId, `тЬЕ Channel Added Successfully!\n\nShare this link with your users:\n\n\`${link}\``, { parse_mode: 'Markdown' }); } delete userStates[fromId]; }};
async function handleUpiInput(bot, msg, owner, userStates) { const fromId = owner.telegram_id; const upiId = msg.text.trim(); const amountToWithdraw = owner.wallet_balance; userStates[fromId] = { awaiting: 'withdraw_confirm', upi_id: upiId, amount: amountToWithdraw }; const confirmationKeyboard = { inline_keyboard: [[{ text: "тЬЕ Yes, Confirm", callback_data: "owner_withdrawconfirm" }, { text: "тЭМ No, Cancel", callback_data: "owner_withdrawcancel" }]] }; await bot.sendMessage(fromId, `Please confirm:\n\nYou want to withdraw **тВ╣${amountToWithdraw.toFixed(2)}** to **${upiId}**?`, { parse_mode: 'Markdown', reply_markup: confirmationKeyboard }); };
async function handleWithdrawConfirm(bot, cbq, owner, userStates) { const state = userStates[owner.telegram_id]; if (state && state.awaiting === 'withdraw_confirm') { await Withdrawal.create({ owner_id: owner._id, amount: state.amount, upi_id: state.upi_id }); await Owner.findByIdAndUpdate(owner._id, { $inc: { wallet_balance: -state.amount } }); await bot.editMessageText(`тЬЕ Your withdrawal request for **тВ╣${state.amount.toFixed(2)}** has been submitted. It will be processed within 24 hours.`, { chat_id: cbq.message.chat.id, message_id: cbq.message.message_id, parse_mode: 'Markdown' }); await bot.sendMessage(process.env.SUPER_ADMIN_ID, `ЁЯФФ **New Withdrawal Request!**\n\nOwner: ${owner.first_name} (\`${owner.telegram_id}\`)\nAmount: \`тВ╣${state.amount.toFixed(2)}\`\nUPI ID: \`${state.upi_id}\``, { parse_mode: 'Markdown' }); delete userStates[owner.telegram_id]; }};
async function showDashboard(bot, chatId, owner, messageId = null) { const commission_percent = parseFloat(process.env.PLATFORM_COMMISSION_PERCENT); const totalEarnings = owner.total_earnings || 0; const service_charge_amount = (totalEarnings * commission_percent) / 100; const walletBalance = owner.wallet_balance || 0; const paidOutAggregation = await Withdrawal.aggregate([ { $match: { owner_id: owner._id, status: 'approved' } }, { $group: { _id: null, total: { $sum: '$amount' } } } ]); const totalPaidOut = paidOutAggregation.length > 0 ? paidOutAggregation[0].total : 0; const grossEarnings = totalEarnings - service_charge_amount; const text = `*ЁЯУК Your Financial Dashboard*\n\n*Summary:*\nЁЯУИ Total Revenue: *тВ╣${totalEarnings.toFixed(2)}*\nтЮЦ Service Charge (${commission_percent}%): *- тВ╣${service_charge_amount.toFixed(2)}*\n------------------------------------\nЁЯТ░ Gross Earnings: *тВ╣${grossEarnings.toFixed(2)}*\n   _(${totalEarnings.toFixed(2)} - ${service_charge_amount.toFixed(2)})_\n\n*Payouts:*\nЁЯТ╕ Total Paid Out: *- тВ╣${totalPaidOut.toFixed(2)}*\n------------------------------------\nтЬЕ **Net Balance (Withdrawable):** **тВ╣${walletBalance.toFixed(2)}**`; const keyboard = { inline_keyboard: [ [{ text: "ЁЯТ╕ Request Withdrawal", callback_data: "owner_withdraw" }], [{ text: "ЁЯУЬ Transaction History", callback_data: "owner_transactions" }, { text: "ЁЯТ╕ Withdrawal History", callback_data: "owner_withdrawalhistory" }], [{ text: "ЁЯУ║ Channel Stats", callback_data: "owner_channelstats" }], [{ text: "тмЕя╕П Back to Main Menu", callback_data: "owner_mainmenu" }] ]}; if (messageId) await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); else await bot.sendMessage(chatId, text, { parse_mode: 'Markdown', reply_markup: keyboard }); }
async function showTransactionHistory(bot, chatId, owner, messageId) { const transactions = await Transaction.find({ owner_id: owner._id }).sort({ timestamp: -1 }).limit(10); let text = "*ЁЯУЬ Last 10 Transactions:*\n\n"; if (transactions.length === 0) { text = "You have no transactions yet."; } else { transactions.forEach(t => { const date = new Date(t.timestamp).toLocaleDateString('en-IN'); text += `*Sale:* +тВ╣${t.amount_paid.toFixed(2)} | *Fee:* -тВ╣${t.commission_charged.toFixed(2)} | *Net:* +тВ╣${t.amount_credited_to_owner.toFixed(2)} _(${date})_\n`; }); } const keyboard = { inline_keyboard: [[{ text: "тмЕя╕П Back to Dashboard", callback_data: "owner_dashboard" }]] }; await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); }
async function showWithdrawalHistory(bot, chatId, owner, messageId) { const withdrawals = await Withdrawal.find({ owner_id: owner._id }).sort({ requested_at: -1 }).limit(10); let text = "*ЁЯТ╕ Last 10 Withdrawals:*\n\n"; if (withdrawals.length === 0) { text = "You have no withdrawal history."; } else { const status_emoji = { pending: 'тМЫя╕П', approved: 'тЬЕ', rejected: 'тЭМ' }; withdrawals.forEach(w => { const date = new Date(w.requested_at).toLocaleDateString('en-IN'); text += `${status_emoji[w.status]} *тВ╣${w.amount.toFixed(2)}* to ${w.upi_id} _(${date})_ - *${w.status}*\n`; }); } const keyboard = { inline_keyboard: [[{ text: "тмЕя╕П Back to Dashboard", callback_data: "owner_dashboard" }]] }; await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); }
async function showChannelStats(bot, chatId, owner, messageId) { const stats = await Transaction.aggregate([ { $match: { owner_id: owner._id } }, { $group: { _id: '$channel_id', totalRevenue: { $sum: '$amount_paid' }, count: { $sum: 1 } } } ]); let text = "*ЁЯУ║ Channel-wise Earnings:*\n\n"; if (stats.length === 0) { text = "No sales data available for any channel yet."; } else { for (const stat of stats) { const channel = await ManagedChannel.findOne({ channel_id: stat._id }); const channelName = channel ? channel.channel_name : `Deleted Channel (${stat._id})`; text += `*${channelName}:*\n- Total Revenue: *тВ╣${stat.totalRevenue.toFixed(2)}*\n- Total Sales: *${stat.count}*\n\n`; } } const keyboard = { inline_keyboard: [[{ text: "тмЕя╕П Back to Dashboard", callback_data: "owner_dashboard" }]] }; await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); }
async function startAddChannelFlow(bot, chatId, fromId, userStates) { userStates[fromId] = { awaiting: 'channel_forward' }; await bot.sendMessage(chatId, `Okay, let's add a new channel.\n\n*Step 1:* Make this bot an Admin in your channel.\n\n*Step 2:* Now, **forward any message** from that channel here.`, { parse_mode: "Markdown" }); }
async function startWithdrawalFlow(bot, chatId, owner, userStates) { const minWithdrawal = parseFloat(process.env.MINIMUM_WITHDRAWAL_AMOUNT); if (owner.wallet_balance < minWithdrawal) { await bot.sendMessage(chatId, `тЭМ Sorry, you need at least тВ╣${minWithdrawal.toFixed(2)} to request a withdrawal. Your current balance is тВ╣${owner.wallet_balance.toFixed(2)}.`); return; } userStates[owner.telegram_id] = { awaiting: 'upi_id' }; await bot.sendMessage(chatId, `Your current withdrawable balance is тВ╣${owner.wallet_balance.toFixed(2)}.\n\nPlease enter your UPI ID:`); }
async function listMyChannels(bot, chatId, owner, messageId = null) { const channels = await ManagedChannel.find({ owner_id: owner._id }); let text = "*Your Connected Channels:*\n\n"; const keyboardRows = []; if (channels.length === 0) { text = "You haven't connected any channels yet."; } else { channels.forEach(ch => { keyboardRows.push([{ text: ch.channel_name, callback_data: `none` }, { text: "тЪЩя╕П Manage", callback_data: `owner_managechannel_${ch._id}` }]); }); } keyboardRows.push([{ text: "тмЕя╕П Back to Main Menu", callback_data: "owner_mainmenu" }]); const opts = { chat_id: chatId, parse_mode: 'Markdown', reply_markup: { inline_keyboard: keyboardRows } }; if(messageId) { opts.message_id = messageId; await bot.editMessageText(text, opts); } else { await bot.sendMessage(chatId, text, opts); } }
async function showChannelManagementMenu(bot, chatId, channelDbId, messageId) { const channel = await ManagedChannel.findById(channelDbId); if (!channel) { await bot.editMessageText("Sorry, this channel was not found.", { chat_id: chatId, message_id: messageId }); return; } const text = `Managing channel: *${channel.channel_name}*`; const keyboard = { inline_keyboard: [ [{ text: "тЬПя╕П Edit Plans", callback_data: `owner_editplans_${channelDbId}` }, { text: "ЁЯФЧ Get Link", callback_data: `owner_getlink_${channelDbId}` }], [{ text: "ЁЯЧСя╕П Remove Channel", callback_data: `owner_removechannel_${channelDbId}` }], [{ text: "тмЕя╕П Back to My Channels", callback_data: "owner_mychannels" }] ]}; await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); }
async function sendChannelLink(bot, chatId, channelDbId) { const channel = await ManagedChannel.findById(channelDbId); const link = `https://t.me/${(await bot.getMe()).username}?start=${channel.unique_start_key}`; await bot.sendMessage(chatId, `Here is the subscriber link for *${channel.channel_name}*:\n\n\`${link}\``, { parse_mode: 'Markdown' }); }
async function confirmRemoveChannel(bot, chatId, channelDbId, messageId) { const text = "тЪая╕П **Are you sure?**\n\nRemoving this channel will stop new subscriptions, but existing subscribers will remain active until their plan expires. This action cannot be undone."; const keyboard = { inline_keyboard: [ [{ text: "ЁЯЧСя╕П Yes, Remove It", callback_data: `owner_confirmremove_${channelDbId}` }], [{ text: "тмЕя╕П No, Go Back", callback_data: `owner_managechannel_${channelDbId}` }] ]}; await bot.editMessageText(text, { chat_id: chatId, message_id: messageId, parse_mode: 'Markdown', reply_markup: keyboard }); }
async function removeChannel(bot, chatId, channelDbId, messageId) { await ManagedChannel.findByIdAndDelete(channelDbId); await bot.editMessageText("тЬЕ Channel has been successfully removed from the platform.", { chat_id: chatId, message_id: messageId }); }

module.exports = { handleOwnerMessage, handleOwnerCallback };
